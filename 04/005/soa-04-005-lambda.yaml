AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DBInstanceArn:
    Type: String
    
  DBSubnetGroup:
    Type: String
    
  Handler:
    Type: String

  Prefix:
    Type: String
    
  Runtime:
    Type: String
    
  Timeout:
    Type: Number

    
Resources:
  Function1:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          import boto3
          import os
          
          region = os.environ['REGION']
          
          client = boto3.client('rds', region_name=region)
          
          def lambda_handler(event, context):
            instance_id = event['instance_id']
            
            response1 = client.describe_db_instances(
              DBInstanceIdentifier=instance_id
            )
            
            response2 = client.create_db_snapshot(
              DBSnapshotIdentifier='{instance}-no-encrypted'.format(instance=instance_id),
              DBInstanceIdentifier=instance_id
            )
            
            return {
              'instance_id': instance_id,
              'availability_zone': response1['DBInstances'][0]['AvailabilityZone'],
              'db_subnet_group_name': response1['DBInstances'][0]['DBSubnetGroup']['DBSubnetGroupName'],
              'security_group_id': response1['DBInstances'][0]['VpcSecurityGroups'][0]['VpcSecurityGroupId'],
              'no_encrypted_snapshot_id': response2['DBSnapshot']['DBSnapshotIdentifier'],
            }
      FunctionName: !Sub "${Prefix}-function1"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      Timeout: !Ref Timeout
      
  Function2:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          import boto3
          import os
          
          region = os.environ['REGION']
          
          client = boto3.client('rds', region_name=region)
          
          def lambda_handler(event, context):
            snapshot_id = event['snapshot_id']
            
            response = client.describe_db_snapshots(
              DBSnapshotIdentifier=snapshot_id
            )

            return response['DBSnapshots'][0]['Status']
      FunctionName: !Sub "${Prefix}-function2"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      Timeout: !Ref Timeout
      
  Function3:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          KMS_KEY_ID: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/rds"
      Code:
        ZipFile: |
          import boto3
          import os
          
          region = os.environ['REGION']
          kms_key_id = os.environ['KMS_KEY_ID']
          
          client = boto3.client('rds', region_name=region)
          
          def lambda_handler(event, context):
            instance_id = event['instance_id']
            snapshot_id = event['snapshot_id']
            
            response = client.copy_db_snapshot(
              SourceDBSnapshotIdentifier=snapshot_id,
              TargetDBSnapshotIdentifier='{instance}-encrypted'.format(instance=instance_id),
              KmsKeyId=kms_key_id,
            )
            
            return response['DBSnapshot']['DBSnapshotIdentifier']
      FunctionName: !Sub "${Prefix}-function3"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      Timeout: !Ref Timeout
      
  Function4:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          REGION: !Ref AWS::Region
      Code:
        ZipFile: |
          import boto3
          import os
          
          region = os.environ['REGION']
          
          client = boto3.client('rds', region_name=region)
          
          def lambda_handler(event, context):
            instance_id = event['instance_id']
            snapshot_id = event['snapshot_id']
            availability_zone = event['availability_zone']
            db_subnet_group_name = event['db_subnet_group_name']
            security_group_id = event['security_group_id']
            
            response = client.restore_db_instance_from_db_snapshot(
              DBInstanceIdentifier='{instance}-encrypted'.format(instance=instance_id),
              DBSnapshotIdentifier=snapshot_id,
              AvailabilityZone=availability_zone,
              DBSubnetGroupName=db_subnet_group_name,
              VpcSecurityGroupIds=[
                security_group_id,
              ]
            )
            return response['DBInstance']['DBInstanceIdentifier']
      FunctionName: !Sub "${Prefix}-function4"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      Timeout: !Ref Timeout
  
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${Prefix}-Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                Resource: 
                  - !Ref DBInstanceArn
              - Effect: Allow
                Action:
                  - rds:CreateDBSnapshot
                  - rds:DescribeDBSnapshots
                Resource: 
                  - !Ref DBInstanceArn
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"
              - Effect: Allow
                Action:
                  - rds:CopyDBSnapshot
                Resource: 
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"
              - Effect: Allow
                Action:
                  - rds:RestoreDBInstanceFromDBSnapshot
                Resource: 
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:*"
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:og:*"
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:pg:*"
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:snapshot:*"
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:subgrp:${DBSubnetGroup}"
                
                
Outputs:
  FunctionArn1:
    Value: !GetAtt Function1.Arn
    
  FunctionArn2:
    Value: !GetAtt Function2.Arn

  FunctionArn3:
    Value: !GetAtt Function3.Arn
    
  FunctionArn4:
    Value: !GetAtt Function4.Arn
