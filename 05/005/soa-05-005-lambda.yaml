AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String
    
  #BucketArn:
  #  Type: String
    
  Handler:
    Type: String
    
  #MemorySize:
  #  Type: Number
    
  Prefix:
    Type: String
    
  Runtime:
    Type: String
    
  SourceInstance:
    Type: String
    
  TargetInstance:
    Type: String
    
    
Resources:
  CustomResource1:
    Type: Custom::CustomResource
    Properties:
      #BucketName: !Ref BucketName
      #ServiceToken: !GetAtt Function.Arn
      ServiceToken: !GetAtt Function.Arn
      Instance: !Ref SourceInstance
      
  CustomResource2:
    Type: Custom::CustomResource
    Properties:
      #BucketName: !Ref BucketName
      #ServiceToken: !GetAtt Function.Arn
      ServiceToken: !GetAtt Function.Arn
      Instance: !Ref TargetInstance
      
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          
          ec2_client = boto3.client('ec2')
           
          CREATE = 'Create'
          #DELETE = 'Delete'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              instance_id = event['ResourceProperties']['Instance']
              
              if event['RequestType'] == CREATE:
                response = ec2_client.describe_instances(
                  InstanceIds=[
                    instance_id
                    ]
                  )
                #print(response)
                #print(response['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['NetworkInterfaceId'])
                eni_id = response['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['NetworkInterfaceId']
                response_data['NetworkInterfaceId'] = eni_id
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      #Environment:
      #  Variables:
      #    BUCKET_NAME: !Ref BucketName
      FunctionName: !Sub "${Prefix}-function"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: FunctionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: "*"
                  #- !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${TargetInstance}"
                  #- !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
              #- Effect: Allow
              #  Action:
              #    - s3:ListBucket
              #    - s3:GetObject
              #    - s3:PutObject
              #    - s3:DeleteObject
              #  Resource:
              #    - !Ref ProdBucketArn
              #    - !Ref StgBucketArn
              #    - !Sub "${ProdBucketArn}/*"
              #    - !Sub "${StgBucketArn}/*"
                  

Outputs:
  #BucketArn:
  
  #FunctionArn:
  #  Value: !GetAtt Function.Arn
  
  SourceNetworkInterfaceId:
    Value: !GetAtt CustomResource1.NetworkInterfaceId
  
  TargetNetworkInterfaceId:
    Value: !GetAtt CustomResource2.NetworkInterfaceId